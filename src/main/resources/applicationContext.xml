<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:jms="http://www.springframework.org/schema/jms"
	xsi:schemaLocation="  
         http://www.springframework.org/schema/beans  
         http://www.springframework.org/schema/beans/spring-beans-4.0.xsd  
         http://www.springframework.org/schema/context  
         http://www.springframework.org/schema/context/spring-context-4.0.xsd  
         http://www.springframework.org/schema/aop    
         http://www.springframework.org/schema/aop/spring-aop-4.0.xsd    
         http://www.springframework.org/schema/tx    
         http://www.springframework.org/schema/tx/spring-tx.xsd
         http://www.springframework.org/schema/jms
         http://www.springframework.org/schema/jms/spring-jms.xsd">

	<!-- 自动扫面注解包 -->
	<context:annotation-config />
	<context:component-scan base-package="com.demo.spring_web.*" />

	<!-- 数据源 -->
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close">
		<property name="driverClassName" value="com.mysql.cj.jdbc.Driver"></property>
		<property name="url"
			value="jdbc:mysql://localhost:3306/demo?serverTimezone=UTC"></property>
		<property name="username" value="root"></property>
		<property name="password" value="mysql1024"></property>
	</bean>

	<!-- 配置sessionFactory -->
	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate5.LocalSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="packagesToScan" value="com.demo.spring_web.model" /><!-- 
			实体类的包 -->
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">org.hibernate.dialect.MySQLDialect</prop>
				<prop key="hibernate.show_sql">true</prop>
				<!-- 会自动创表，但是不会自动创建数据库，所以要先手动创建数据库。 -->
				<prop key="hibernate.hbm2ddl.auto">update</prop>
				<prop key="hibernate.format_sql">true</prop>
			</props>
		</property>
	</bean>

	<!-- 用于注入到GeneralDao中 -->
	<bean id="hibernateTemplate" class="org.springframework.orm.hibernate5.HibernateTemplate">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>

	<!-- 配置事务管理 -->
	<bean id="transactionManager"
		class="org.springframework.orm.hibernate5.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>
	<!-- 配置multipart解析器 -->
	<bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<property name="defaultEncoding" value="UTF-8" />
		<property name="maxUploadSize" value="2000000000" />
	</bean>
	<!-- 学习使用spring消息 jms -->
	<!-- 真正可以产生Connection的ConnectionFactory，由对应的 JMS服务厂商提供-->   
    <bean id="targetConnectionFactory" class="org.apache.activemq.ActiveMQConnectionFactory">    
        <property name="brokerURL" value="tcp://localhost:61616"/>    
    </bean>
    <!-- Spring用于管理真正的ConnectionFactory的ConnectionFactory -->    
    <bean id="connectionFactory" class="org.springframework.jms.connection.SingleConnectionFactory">  
        <!-- 目标ConnectionFactory对应真实的可以产生JMS Connection的ConnectionFactory -->    
        <property name="targetConnectionFactory" ref="targetConnectionFactory"/>    
    </bean> 
    <!-- Spring提供的JMS工具类，它可以进行消息发送、接收等 -->    
    <bean id="jmsTemplate" class="org.springframework.jms.core.JmsTemplate">    
        <!-- 这个connectionFactory对应的是我们定义的Spring提供的那个ConnectionFactory对象 -->    
        <property name="connectionFactory" ref="connectionFactory"/> 
        <property name="defaultDestinationName" value="order-queue"/>   
    </bean> 
    <!-- 消息监听容器 --> 
    <jms:annotation-driven />      
    <bean id="jmsListenerContainerFactory"  class="org.springframework.jms.config.DefaultJmsListenerContainerFactory"> 
        <property name="connectionFactory" ref="connectionFactory" /> 
        <property name="concurrency" value="1-1" />    
    </bean>
	<!-- 开启事务管理注解 -->
	<aop:aspectj-autoproxy />
	<tx:annotation-driven />

</beans>  